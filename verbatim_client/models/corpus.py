# coding: utf-8

"""
    Verbatim AI API

    **Welcome on Verbatim AI Platform!**  You'll find here advanced specs of our APIs. You can play with these APIs on our **[Swagger Playground](https://www.verbatim.cloud/api-docs/swagger)**. Feel free to check our **[Cookbook](https://www.verbatim.cloud/cookbook)** to get samples and how start easily.  _____

    The version of the OpenAPI document: v1
    Contact: api@verbatim.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Corpus(BaseModel):
    """
    Corpus
    """ # noqa: E501
    display_name: Optional[StrictStr] = Field(default=None, description="Display name of the Corpus", alias="displayName")
    description: Optional[StrictStr] = Field(default=None, description="Description of the Corpus")
    created_at: Optional[datetime] = Field(default=None, description="Creation date of the corpus", alias="createdAt")
    updated_at: Optional[datetime] = Field(default=None, description="Last update on the corpus", alias="updatedAt")
    org_id: Optional[StrictStr] = Field(default=None, description="ID of your organization. Internal use only", alias="orgId")
    id: Optional[StrictStr] = Field(default=None, description="ID of the Corpus. Use this ID as primary key on API")
    nb_doc: Optional[StrictInt] = Field(default=None, description="Number of doc in the Corpus", alias="nbDoc")
    size: Optional[StrictInt] = Field(default=None, description="Size (in bytes) of the corpus")
    __properties: ClassVar[List[str]] = ["displayName", "description", "createdAt", "updatedAt", "orgId", "id", "nbDoc", "size"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Corpus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Corpus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "displayName": obj.get("displayName"),
            "description": obj.get("description"),
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt"),
            "orgId": obj.get("orgId"),
            "id": obj.get("id"),
            "nbDoc": obj.get("nbDoc"),
            "size": obj.get("size")
        })
        return _obj


