# coding: utf-8

"""
    Verbatim AI API

    **Welcome on Verbatim AI Platform!**  You'll find here advanced specs of our APIs. You can play with these APIs on our **[Swagger Playground](https://www.verbatim.cloud/api-docs/swagger)**. Feel free to check our **[Cookbook](https://www.verbatim.cloud/cookbook)** to get samples and how start easily.  _____

    The version of the OpenAPI document: v1
    Contact: api@verbatim.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from verbatim_client.models.prompt_document_attachment import PromptDocumentAttachment
from verbatim_client.models.prompt_part import PromptPart
from verbatim_client.models.prompt_web_attachment import PromptWebAttachment
from typing import Optional, Set
from typing_extensions import Self

class PromptResponse(BaseModel):
    """
    PromptResponse
    """ # noqa: E501
    issued_at: Optional[datetime] = Field(default=None, alias="issuedAt")
    corpus_id: Optional[StrictStr] = Field(default=None, alias="corpusId")
    query: Optional[StrictStr] = Field(default=None, description="Your query")
    text: Optional[StrictStr] = Field(default=None, description="Generative AI Agent answer to your query")
    parts: Optional[List[PromptPart]] = None
    document: Optional[List[PromptDocumentAttachment]] = None
    web: Optional[List[PromptWebAttachment]] = None
    __properties: ClassVar[List[str]] = ["issuedAt", "corpusId", "query", "text", "parts", "document", "web"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PromptResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in parts (list)
        _items = []
        if self.parts:
            for _item_parts in self.parts:
                if _item_parts:
                    _items.append(_item_parts.to_dict())
            _dict['parts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in document (list)
        _items = []
        if self.document:
            for _item_document in self.document:
                if _item_document:
                    _items.append(_item_document.to_dict())
            _dict['document'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in web (list)
        _items = []
        if self.web:
            for _item_web in self.web:
                if _item_web:
                    _items.append(_item_web.to_dict())
            _dict['web'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PromptResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "issuedAt": obj.get("issuedAt"),
            "corpusId": obj.get("corpusId"),
            "query": obj.get("query"),
            "text": obj.get("text"),
            "parts": [PromptPart.from_dict(_item) for _item in obj["parts"]] if obj.get("parts") is not None else None,
            "document": [PromptDocumentAttachment.from_dict(_item) for _item in obj["document"]] if obj.get("document") is not None else None,
            "web": [PromptWebAttachment.from_dict(_item) for _item in obj["web"]] if obj.get("web") is not None else None
        })
        return _obj


