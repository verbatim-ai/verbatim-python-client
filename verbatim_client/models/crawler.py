# coding: utf-8

"""
    Verbatim AI API

    **Welcome on Verbatim AI Platform!**  You'll find here advanced specs of our APIs. You can play with these APIs on our **[Swagger Playground](https://www.verbatim.cloud/api-docs/swagger)**. Feel free to check our **[Cookbook](https://www.verbatim.cloud/cookbook)** to get samples and how start easily.  _____

    The version of the OpenAPI document: v1
    Contact: api@verbatim.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class Crawler(BaseModel):
    """
    Crawler
    """ # noqa: E501
    display_name: Annotated[str, Field(strict=True, max_length=128)] = Field(description="Display name of your Crawler", alias="displayName")
    description: Optional[Annotated[str, Field(strict=True, max_length=512)]] = Field(default=None, description="Description of your Crawler")
    url: Annotated[str, Field(strict=True, max_length=128)] = Field(description="Root url of the domain the crawl. Must start with http// or https://")
    max_crawl_depth: Optional[Annotated[int, Field(le=5, strict=True)]] = Field(default=None, description="Maximum crawl depth", alias="maxCrawlDepth")
    enabled: Optional[StrictBool] = Field(default=None, description="Activation state of the crawler. True, the crawler is enable and have recurrent crawl schedule. False, the crawler is disable, no crawl until is back to an enable state.")
    created_at: Optional[datetime] = Field(default=None, alias="createdAt")
    updated_at: Optional[datetime] = Field(default=None, alias="updatedAt")
    id: Optional[StrictStr] = Field(default=None, description="ID of the crawler. Primary key use to index this crawler")
    corpus_id: Optional[StrictStr] = Field(default=None, description="ID of the corpus where the crawler is attached", alias="corpusId")
    next_crawl: Optional[datetime] = Field(default=None, alias="nextCrawl")
    last_crawl: Optional[datetime] = Field(default=None, alias="lastCrawl")
    nb_doc: Optional[StrictInt] = Field(default=None, description="Number of document crawler by the crawler. Merged into your quota", alias="nbDoc")
    size: Optional[StrictInt] = Field(default=None, description="Storage size use by the crawler.  Merged into your quota")
    __properties: ClassVar[List[str]] = ["displayName", "description", "url", "maxCrawlDepth", "enabled", "createdAt", "updatedAt", "id", "corpusId", "nextCrawl", "lastCrawl", "nbDoc", "size"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Crawler from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Crawler from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "displayName": obj.get("displayName"),
            "description": obj.get("description"),
            "url": obj.get("url"),
            "maxCrawlDepth": obj.get("maxCrawlDepth"),
            "enabled": obj.get("enabled"),
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt"),
            "id": obj.get("id"),
            "corpusId": obj.get("corpusId"),
            "nextCrawl": obj.get("nextCrawl"),
            "lastCrawl": obj.get("lastCrawl"),
            "nbDoc": obj.get("nbDoc"),
            "size": obj.get("size")
        })
        return _obj


