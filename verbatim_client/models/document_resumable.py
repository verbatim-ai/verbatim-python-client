# coding: utf-8

"""
    Verbatim AI API

    **Welcome on Verbatim AI Platform!**  You'll find here advanced specs of our APIs. You can play with these APIs on our **[Swagger Playground](https://www.verbatim.cloud/api-docs/swagger)**. Feel free to check our **[Cookbook](https://www.verbatim.cloud/cookbook)** to get samples and how start easily.  _____

    The version of the OpenAPI document: v1
    Contact: api@verbatim.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from verbatim_client.models.document_page import DocumentPage
from typing import Optional, Set
from typing_extensions import Self

class DocumentResumable(BaseModel):
    """
    DocumentResumable
    """ # noqa: E501
    id: Optional[StrictStr] = None
    created_at: Optional[datetime] = Field(default=None, alias="createdAt")
    updated_at: Optional[datetime] = Field(default=None, alias="updatedAt")
    corpus_id: Optional[StrictStr] = Field(default=None, description="ID of the corpus where the document is stored", alias="corpusId")
    state: Optional[StrictStr] = Field(default=None, description="Storage size, given in bytes")
    filename: Optional[StrictStr] = Field(default=None, description="Filename of the document")
    content_type: Optional[StrictStr] = Field(default=None, description="Content type of the document", alias="contentType")
    size: Optional[StrictInt] = Field(default=None, description="Storage size, given in bytes")
    nb_pages: Optional[StrictInt] = Field(default=None, description="Total number of pages in the document", alias="nbPages")
    pages: Optional[List[DocumentPage]] = Field(default=None, description="Info abouts pages of the document (title, previews, fileId of the preview)")
    upload_session_url: Optional[StrictStr] = Field(default=None, description="Upload url to push chunks of your file.**[Resumable documentation from Google](https://cloud.google.com/storage/docs/performing-resumable-uploads#chunked-upload)** and **[our Cookbook](https://www.verbatim.cloud/cookbook/resumable-uploads)** explain how use this `uploadSessionURL`", alias="uploadSessionURL")
    upload_session_expired_at: Optional[datetime] = Field(default=None, description="Timestamp when URL will be expired. `uploadSessionURL` can't be used any more after the date", alias="uploadSessionExpiredAt")
    __properties: ClassVar[List[str]] = ["id", "createdAt", "updatedAt", "corpusId", "state", "filename", "contentType", "size", "nbPages", "pages", "uploadSessionURL", "uploadSessionExpiredAt"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['unknown', 'pending', 'processing', 'ready', 'error']):
            raise ValueError("must be one of enum values ('unknown', 'pending', 'processing', 'ready', 'error')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DocumentResumable from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in pages (list)
        _items = []
        if self.pages:
            for _item_pages in self.pages:
                if _item_pages:
                    _items.append(_item_pages.to_dict())
            _dict['pages'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DocumentResumable from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt"),
            "corpusId": obj.get("corpusId"),
            "state": obj.get("state"),
            "filename": obj.get("filename"),
            "contentType": obj.get("contentType"),
            "size": obj.get("size"),
            "nbPages": obj.get("nbPages"),
            "pages": [DocumentPage.from_dict(_item) for _item in obj["pages"]] if obj.get("pages") is not None else None,
            "uploadSessionURL": obj.get("uploadSessionURL"),
            "uploadSessionExpiredAt": obj.get("uploadSessionExpiredAt")
        })
        return _obj


